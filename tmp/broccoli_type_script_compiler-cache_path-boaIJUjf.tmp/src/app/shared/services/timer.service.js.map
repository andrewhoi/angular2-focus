{"version":3,"file":"timer.service.js","sourceRoot":"","sources":["timer.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { DataService } from './data.service';\nimport { NotificationService } from './notification.service';\nimport { PhaseType } from '../../interfaces/interfaces';\ndeclare let Firebase;\n\n@Injectable()\nexport class TimerService {\n  runningTime$: Observable<Date | {}>;\n  focusRunning: boolean;\n  clockRunning: boolean;\n\n  private _timerObserver: any;\n  private _runningTime: Date;\n  private _interval: any;\n  private _selectedTime: number;\n\n  constructor(\n    private _dataService: DataService,\n    private _notificationService: NotificationService) {\n\n    this.runningTime$ = new Observable(observer => this._timerObserver = observer);\n    this.runningTime$.subscribe();\n    this.stopTimer();\n    this._selectedTime = null;\n  }\n\n  get runningPhaseType() {\n    return this._selectedTime;\n  }\n\n  startTimer(time: PhaseType) {\n    if (this.clockRunning) {\n      this.stopTimer();\n    } else {\n      this._startTimer(time);\n      this._selectedTime = time;\n      this.focusRunning = true;\n    }\n  }\n\n  stopTimer() {\n    clearInterval(this._interval);\n    this._runningTime = new Date();\n    this._runningTime.setMinutes(0);\n    this._runningTime.setSeconds(0);\n    this._timerObserver.next(this._runningTime);\n    this.clockRunning = false;\n    this._selectedTime = null;\n  }\n\n  private _startTimer(phaseType: PhaseType) {\n    this._selectedTime = phaseType;\n    this.clockRunning = true;\n    this._runningTime.setMinutes(phaseType);\n    this._runningTime.setSeconds(1); // test until ready for mins\n\n    this._interval = setInterval(() => {\n      if (this._timerFinished()) {\n        this._saveTime();\n        this.stopTimer();\n      } else {\n        this._runningTime = new Date(this._runningTime.getTime() - 1000);\n      }\n\n      this._timerObserver.next(this._runningTime);\n    }, 1000);\n  }\n\n  private _timerFinished() {\n    return (this._runningTime.getSeconds() === 0 && this._runningTime.getMinutes() === 0);\n  }\n\n  private _saveTime() {\n    let phaseType = null;\n    let message = null;\n\n    switch (this._selectedTime) {\n      case PhaseType.FOCUS:\n        phaseType = PhaseType.FOCUS;\n        message = 'Focus Phase Complete!';\n        break;\n      case PhaseType.SHORT_BREAK:\n        phaseType = PhaseType.SHORT_BREAK;\n        message = 'Short Break Complete!';\n        break;\n      case PhaseType.LONG_BREAK:\n        phaseType = PhaseType.LONG_BREAK;\n        message = 'Long Break Complete!';\n        break;\n      default:\n        phaseType = this._selectedTime;\n        message = 'Custom Brake Complete!';\n        break;\n    }\n\n    this._selectedTime = null;\n    this._dataService.addFocusPhase({ phaseType, dateCreated: Firebase.ServerValue.TIMESTAMP });\n    this._notificationService.openNotification(message);\n  }\n\n  private getPhaseTypeMins\n}"]}